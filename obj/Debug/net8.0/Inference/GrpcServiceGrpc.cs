// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Inference/grpc_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2020-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Inference {
  /// <summary>
  ///@@
  ///@@.. cpp:var:: service InferenceService
  ///@@
  ///@@   Inference Server GRPC endpoints.
  ///@@
  /// </summary>
  public static partial class GRPCInferenceService
  {
    static readonly string __ServiceName = "inference.GRPCInferenceService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerLiveRequest> __Marshaller_inference_ServerLiveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerLiveRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerLiveResponse> __Marshaller_inference_ServerLiveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerLiveResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerReadyRequest> __Marshaller_inference_ServerReadyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerReadyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerReadyResponse> __Marshaller_inference_ServerReadyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerReadyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelReadyRequest> __Marshaller_inference_ModelReadyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelReadyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelReadyResponse> __Marshaller_inference_ModelReadyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelReadyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerMetadataRequest> __Marshaller_inference_ServerMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ServerMetadataResponse> __Marshaller_inference_ServerMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ServerMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelMetadataRequest> __Marshaller_inference_ModelMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelMetadataResponse> __Marshaller_inference_ModelMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelInferRequest> __Marshaller_inference_ModelInferRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelInferRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelInferResponse> __Marshaller_inference_ModelInferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelInferResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelStreamInferResponse> __Marshaller_inference_ModelStreamInferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelStreamInferResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelConfigRequest> __Marshaller_inference_ModelConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelConfigResponse> __Marshaller_inference_ModelConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelConfigResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelStatisticsRequest> __Marshaller_inference_ModelStatisticsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelStatisticsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.ModelStatisticsResponse> __Marshaller_inference_ModelStatisticsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.ModelStatisticsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryIndexRequest> __Marshaller_inference_RepositoryIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryIndexResponse> __Marshaller_inference_RepositoryIndexResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryIndexResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryModelLoadRequest> __Marshaller_inference_RepositoryModelLoadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryModelLoadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryModelLoadResponse> __Marshaller_inference_RepositoryModelLoadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryModelLoadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryModelUnloadRequest> __Marshaller_inference_RepositoryModelUnloadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryModelUnloadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.RepositoryModelUnloadResponse> __Marshaller_inference_RepositoryModelUnloadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.RepositoryModelUnloadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryStatusRequest> __Marshaller_inference_SystemSharedMemoryStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryStatusResponse> __Marshaller_inference_SystemSharedMemoryStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryRegisterRequest> __Marshaller_inference_SystemSharedMemoryRegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryRegisterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryRegisterResponse> __Marshaller_inference_SystemSharedMemoryRegisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryRegisterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryUnregisterRequest> __Marshaller_inference_SystemSharedMemoryUnregisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryUnregisterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.SystemSharedMemoryUnregisterResponse> __Marshaller_inference_SystemSharedMemoryUnregisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.SystemSharedMemoryUnregisterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryStatusRequest> __Marshaller_inference_CudaSharedMemoryStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryStatusResponse> __Marshaller_inference_CudaSharedMemoryStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryRegisterRequest> __Marshaller_inference_CudaSharedMemoryRegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryRegisterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryRegisterResponse> __Marshaller_inference_CudaSharedMemoryRegisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryRegisterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryUnregisterRequest> __Marshaller_inference_CudaSharedMemoryUnregisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryUnregisterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.CudaSharedMemoryUnregisterResponse> __Marshaller_inference_CudaSharedMemoryUnregisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.CudaSharedMemoryUnregisterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.TraceSettingRequest> __Marshaller_inference_TraceSettingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.TraceSettingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.TraceSettingResponse> __Marshaller_inference_TraceSettingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.TraceSettingResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.LogSettingsRequest> __Marshaller_inference_LogSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.LogSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inference.LogSettingsResponse> __Marshaller_inference_LogSettingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inference.LogSettingsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ServerLiveRequest, global::Inference.ServerLiveResponse> __Method_ServerLive = new grpc::Method<global::Inference.ServerLiveRequest, global::Inference.ServerLiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerLive",
        __Marshaller_inference_ServerLiveRequest,
        __Marshaller_inference_ServerLiveResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ServerReadyRequest, global::Inference.ServerReadyResponse> __Method_ServerReady = new grpc::Method<global::Inference.ServerReadyRequest, global::Inference.ServerReadyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerReady",
        __Marshaller_inference_ServerReadyRequest,
        __Marshaller_inference_ServerReadyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelReadyRequest, global::Inference.ModelReadyResponse> __Method_ModelReady = new grpc::Method<global::Inference.ModelReadyRequest, global::Inference.ModelReadyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelReady",
        __Marshaller_inference_ModelReadyRequest,
        __Marshaller_inference_ModelReadyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ServerMetadataRequest, global::Inference.ServerMetadataResponse> __Method_ServerMetadata = new grpc::Method<global::Inference.ServerMetadataRequest, global::Inference.ServerMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerMetadata",
        __Marshaller_inference_ServerMetadataRequest,
        __Marshaller_inference_ServerMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelMetadataRequest, global::Inference.ModelMetadataResponse> __Method_ModelMetadata = new grpc::Method<global::Inference.ModelMetadataRequest, global::Inference.ModelMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelMetadata",
        __Marshaller_inference_ModelMetadataRequest,
        __Marshaller_inference_ModelMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelInferRequest, global::Inference.ModelInferResponse> __Method_ModelInfer = new grpc::Method<global::Inference.ModelInferRequest, global::Inference.ModelInferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelInfer",
        __Marshaller_inference_ModelInferRequest,
        __Marshaller_inference_ModelInferResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelInferRequest, global::Inference.ModelStreamInferResponse> __Method_ModelStreamInfer = new grpc::Method<global::Inference.ModelInferRequest, global::Inference.ModelStreamInferResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ModelStreamInfer",
        __Marshaller_inference_ModelInferRequest,
        __Marshaller_inference_ModelStreamInferResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelConfigRequest, global::Inference.ModelConfigResponse> __Method_ModelConfig = new grpc::Method<global::Inference.ModelConfigRequest, global::Inference.ModelConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelConfig",
        __Marshaller_inference_ModelConfigRequest,
        __Marshaller_inference_ModelConfigResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.ModelStatisticsRequest, global::Inference.ModelStatisticsResponse> __Method_ModelStatistics = new grpc::Method<global::Inference.ModelStatisticsRequest, global::Inference.ModelStatisticsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModelStatistics",
        __Marshaller_inference_ModelStatisticsRequest,
        __Marshaller_inference_ModelStatisticsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.RepositoryIndexRequest, global::Inference.RepositoryIndexResponse> __Method_RepositoryIndex = new grpc::Method<global::Inference.RepositoryIndexRequest, global::Inference.RepositoryIndexResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RepositoryIndex",
        __Marshaller_inference_RepositoryIndexRequest,
        __Marshaller_inference_RepositoryIndexResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.RepositoryModelLoadRequest, global::Inference.RepositoryModelLoadResponse> __Method_RepositoryModelLoad = new grpc::Method<global::Inference.RepositoryModelLoadRequest, global::Inference.RepositoryModelLoadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RepositoryModelLoad",
        __Marshaller_inference_RepositoryModelLoadRequest,
        __Marshaller_inference_RepositoryModelLoadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.RepositoryModelUnloadRequest, global::Inference.RepositoryModelUnloadResponse> __Method_RepositoryModelUnload = new grpc::Method<global::Inference.RepositoryModelUnloadRequest, global::Inference.RepositoryModelUnloadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RepositoryModelUnload",
        __Marshaller_inference_RepositoryModelUnloadRequest,
        __Marshaller_inference_RepositoryModelUnloadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.SystemSharedMemoryStatusRequest, global::Inference.SystemSharedMemoryStatusResponse> __Method_SystemSharedMemoryStatus = new grpc::Method<global::Inference.SystemSharedMemoryStatusRequest, global::Inference.SystemSharedMemoryStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SystemSharedMemoryStatus",
        __Marshaller_inference_SystemSharedMemoryStatusRequest,
        __Marshaller_inference_SystemSharedMemoryStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.SystemSharedMemoryRegisterRequest, global::Inference.SystemSharedMemoryRegisterResponse> __Method_SystemSharedMemoryRegister = new grpc::Method<global::Inference.SystemSharedMemoryRegisterRequest, global::Inference.SystemSharedMemoryRegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SystemSharedMemoryRegister",
        __Marshaller_inference_SystemSharedMemoryRegisterRequest,
        __Marshaller_inference_SystemSharedMemoryRegisterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.SystemSharedMemoryUnregisterRequest, global::Inference.SystemSharedMemoryUnregisterResponse> __Method_SystemSharedMemoryUnregister = new grpc::Method<global::Inference.SystemSharedMemoryUnregisterRequest, global::Inference.SystemSharedMemoryUnregisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SystemSharedMemoryUnregister",
        __Marshaller_inference_SystemSharedMemoryUnregisterRequest,
        __Marshaller_inference_SystemSharedMemoryUnregisterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.CudaSharedMemoryStatusRequest, global::Inference.CudaSharedMemoryStatusResponse> __Method_CudaSharedMemoryStatus = new grpc::Method<global::Inference.CudaSharedMemoryStatusRequest, global::Inference.CudaSharedMemoryStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CudaSharedMemoryStatus",
        __Marshaller_inference_CudaSharedMemoryStatusRequest,
        __Marshaller_inference_CudaSharedMemoryStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.CudaSharedMemoryRegisterRequest, global::Inference.CudaSharedMemoryRegisterResponse> __Method_CudaSharedMemoryRegister = new grpc::Method<global::Inference.CudaSharedMemoryRegisterRequest, global::Inference.CudaSharedMemoryRegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CudaSharedMemoryRegister",
        __Marshaller_inference_CudaSharedMemoryRegisterRequest,
        __Marshaller_inference_CudaSharedMemoryRegisterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.CudaSharedMemoryUnregisterRequest, global::Inference.CudaSharedMemoryUnregisterResponse> __Method_CudaSharedMemoryUnregister = new grpc::Method<global::Inference.CudaSharedMemoryUnregisterRequest, global::Inference.CudaSharedMemoryUnregisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CudaSharedMemoryUnregister",
        __Marshaller_inference_CudaSharedMemoryUnregisterRequest,
        __Marshaller_inference_CudaSharedMemoryUnregisterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.TraceSettingRequest, global::Inference.TraceSettingResponse> __Method_TraceSetting = new grpc::Method<global::Inference.TraceSettingRequest, global::Inference.TraceSettingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraceSetting",
        __Marshaller_inference_TraceSettingRequest,
        __Marshaller_inference_TraceSettingResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inference.LogSettingsRequest, global::Inference.LogSettingsResponse> __Method_LogSettings = new grpc::Method<global::Inference.LogSettingsRequest, global::Inference.LogSettingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogSettings",
        __Marshaller_inference_LogSettingsRequest,
        __Marshaller_inference_LogSettingsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Inference.GrpcServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for GRPCInferenceService</summary>
    public partial class GRPCInferenceServiceClient : grpc::ClientBase<GRPCInferenceServiceClient>
    {
      /// <summary>Creates a new client for GRPCInferenceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GRPCInferenceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GRPCInferenceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GRPCInferenceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GRPCInferenceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GRPCInferenceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      ///@@       (ServerLiveResponse)
      ///@@
      ///@@     Check liveness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerLiveResponse ServerLive(global::Inference.ServerLiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerLive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      ///@@       (ServerLiveResponse)
      ///@@
      ///@@     Check liveness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerLiveResponse ServerLive(global::Inference.ServerLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerLive, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      ///@@       (ServerLiveResponse)
      ///@@
      ///@@     Check liveness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerLiveResponse> ServerLiveAsync(global::Inference.ServerLiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerLiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      ///@@       (ServerLiveResponse)
      ///@@
      ///@@     Check liveness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerLiveResponse> ServerLiveAsync(global::Inference.ServerLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerLive, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      ///@@       (ServerReadyResponse)
      ///@@
      ///@@     Check readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerReadyResponse ServerReady(global::Inference.ServerReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerReady(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      ///@@       (ServerReadyResponse)
      ///@@
      ///@@     Check readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerReadyResponse ServerReady(global::Inference.ServerReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerReady, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      ///@@       (ServerReadyResponse)
      ///@@
      ///@@     Check readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerReadyResponse> ServerReadyAsync(global::Inference.ServerReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerReadyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      ///@@       (ServerReadyResponse)
      ///@@
      ///@@     Check readiness of the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerReadyResponse> ServerReadyAsync(global::Inference.ServerReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerReady, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      ///@@       (ModelReadyResponse)
      ///@@
      ///@@     Check readiness of a model in the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelReadyResponse ModelReady(global::Inference.ModelReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelReady(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      ///@@       (ModelReadyResponse)
      ///@@
      ///@@     Check readiness of a model in the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelReadyResponse ModelReady(global::Inference.ModelReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelReady, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      ///@@       (ModelReadyResponse)
      ///@@
      ///@@     Check readiness of a model in the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelReadyResponse> ModelReadyAsync(global::Inference.ModelReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelReadyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      ///@@       (ModelReadyResponse)
      ///@@
      ///@@     Check readiness of a model in the inference server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelReadyResponse> ModelReadyAsync(global::Inference.ModelReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelReady, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      ///@@       (ServerMetadataResponse)
      ///@@
      ///@@     Get server metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerMetadataResponse ServerMetadata(global::Inference.ServerMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      ///@@       (ServerMetadataResponse)
      ///@@
      ///@@     Get server metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ServerMetadataResponse ServerMetadata(global::Inference.ServerMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerMetadata, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      ///@@       (ServerMetadataResponse)
      ///@@
      ///@@     Get server metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerMetadataResponse> ServerMetadataAsync(global::Inference.ServerMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      ///@@       (ServerMetadataResponse)
      ///@@
      ///@@     Get server metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ServerMetadataResponse> ServerMetadataAsync(global::Inference.ServerMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerMetadata, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      ///@@       (ModelMetadataResponse)
      ///@@
      ///@@     Get model metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelMetadataResponse ModelMetadata(global::Inference.ModelMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      ///@@       (ModelMetadataResponse)
      ///@@
      ///@@     Get model metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelMetadataResponse ModelMetadata(global::Inference.ModelMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelMetadata, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      ///@@       (ModelMetadataResponse)
      ///@@
      ///@@     Get model metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelMetadataResponse> ModelMetadataAsync(global::Inference.ModelMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      ///@@       (ModelMetadataResponse)
      ///@@
      ///@@     Get model metadata.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelMetadataResponse> ModelMetadataAsync(global::Inference.ModelMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelMetadata, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      ///@@       (ModelInferResponse)
      ///@@
      ///@@     Perform inference using a specific model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelInferResponse ModelInfer(global::Inference.ModelInferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelInfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      ///@@       (ModelInferResponse)
      ///@@
      ///@@     Perform inference using a specific model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelInferResponse ModelInfer(global::Inference.ModelInferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelInfer, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      ///@@       (ModelInferResponse)
      ///@@
      ///@@     Perform inference using a specific model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelInferResponse> ModelInferAsync(global::Inference.ModelInferRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelInferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      ///@@       (ModelInferResponse)
      ///@@
      ///@@     Perform inference using a specific model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelInferResponse> ModelInferAsync(global::Inference.ModelInferRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelInfer, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
      ///@@       (stream ModelStreamInferResponse)
      ///@@
      ///@@     Perform streaming inference.
      ///@@
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Inference.ModelInferRequest, global::Inference.ModelStreamInferResponse> ModelStreamInfer(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelStreamInfer(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
      ///@@       (stream ModelStreamInferResponse)
      ///@@
      ///@@     Perform streaming inference.
      ///@@
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Inference.ModelInferRequest, global::Inference.ModelStreamInferResponse> ModelStreamInfer(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ModelStreamInfer, null, options);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      ///@@       (ModelConfigResponse)
      ///@@
      ///@@     Get model configuration.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelConfigResponse ModelConfig(global::Inference.ModelConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      ///@@       (ModelConfigResponse)
      ///@@
      ///@@     Get model configuration.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelConfigResponse ModelConfig(global::Inference.ModelConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelConfig, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      ///@@       (ModelConfigResponse)
      ///@@
      ///@@     Get model configuration.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelConfigResponse> ModelConfigAsync(global::Inference.ModelConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      ///@@       (ModelConfigResponse)
      ///@@
      ///@@     Get model configuration.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelConfigResponse> ModelConfigAsync(global::Inference.ModelConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelConfig, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStatistics(
      ///@@                     ModelStatisticsRequest)
      ///@@                   returns (ModelStatisticsResponse)
      ///@@
      ///@@     Get the cumulative inference statistics for a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelStatisticsResponse ModelStatistics(global::Inference.ModelStatisticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelStatistics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStatistics(
      ///@@                     ModelStatisticsRequest)
      ///@@                   returns (ModelStatisticsResponse)
      ///@@
      ///@@     Get the cumulative inference statistics for a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.ModelStatisticsResponse ModelStatistics(global::Inference.ModelStatisticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModelStatistics, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStatistics(
      ///@@                     ModelStatisticsRequest)
      ///@@                   returns (ModelStatisticsResponse)
      ///@@
      ///@@     Get the cumulative inference statistics for a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelStatisticsResponse> ModelStatisticsAsync(global::Inference.ModelStatisticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModelStatisticsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc ModelStatistics(
      ///@@                     ModelStatisticsRequest)
      ///@@                   returns (ModelStatisticsResponse)
      ///@@
      ///@@     Get the cumulative inference statistics for a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.ModelStatisticsResponse> ModelStatisticsAsync(global::Inference.ModelStatisticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModelStatistics, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      ///@@       (RepositoryIndexResponse)
      ///@@
      ///@@     Get the index of model repository contents.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryIndexResponse RepositoryIndex(global::Inference.RepositoryIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      ///@@       (RepositoryIndexResponse)
      ///@@
      ///@@     Get the index of model repository contents.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryIndexResponse RepositoryIndex(global::Inference.RepositoryIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RepositoryIndex, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      ///@@       (RepositoryIndexResponse)
      ///@@
      ///@@     Get the index of model repository contents.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryIndexResponse> RepositoryIndexAsync(global::Inference.RepositoryIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      ///@@       (RepositoryIndexResponse)
      ///@@
      ///@@     Get the index of model repository contents.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryIndexResponse> RepositoryIndexAsync(global::Inference.RepositoryIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RepositoryIndex, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      ///@@       (RepositoryModelLoadResponse)
      ///@@
      ///@@     Load or reload a model from a repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryModelLoadResponse RepositoryModelLoad(global::Inference.RepositoryModelLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryModelLoad(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      ///@@       (RepositoryModelLoadResponse)
      ///@@
      ///@@     Load or reload a model from a repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryModelLoadResponse RepositoryModelLoad(global::Inference.RepositoryModelLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RepositoryModelLoad, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      ///@@       (RepositoryModelLoadResponse)
      ///@@
      ///@@     Load or reload a model from a repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryModelLoadResponse> RepositoryModelLoadAsync(global::Inference.RepositoryModelLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryModelLoadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      ///@@       (RepositoryModelLoadResponse)
      ///@@
      ///@@     Load or reload a model from a repository.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryModelLoadResponse> RepositoryModelLoadAsync(global::Inference.RepositoryModelLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RepositoryModelLoad, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      ///@@       returns (RepositoryModelUnloadResponse)
      ///@@
      ///@@     Unload a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryModelUnloadResponse RepositoryModelUnload(global::Inference.RepositoryModelUnloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryModelUnload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      ///@@       returns (RepositoryModelUnloadResponse)
      ///@@
      ///@@     Unload a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.RepositoryModelUnloadResponse RepositoryModelUnload(global::Inference.RepositoryModelUnloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RepositoryModelUnload, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      ///@@       returns (RepositoryModelUnloadResponse)
      ///@@
      ///@@     Unload a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryModelUnloadResponse> RepositoryModelUnloadAsync(global::Inference.RepositoryModelUnloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RepositoryModelUnloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      ///@@       returns (RepositoryModelUnloadResponse)
      ///@@
      ///@@     Unload a model.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.RepositoryModelUnloadResponse> RepositoryModelUnloadAsync(global::Inference.RepositoryModelUnloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RepositoryModelUnload, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      ///@@                     SystemSharedMemoryStatusRequest)
      ///@@                   returns (SystemSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered system-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryStatusResponse SystemSharedMemoryStatus(global::Inference.SystemSharedMemoryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      ///@@                     SystemSharedMemoryStatusRequest)
      ///@@                   returns (SystemSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered system-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryStatusResponse SystemSharedMemoryStatus(global::Inference.SystemSharedMemoryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SystemSharedMemoryStatus, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      ///@@                     SystemSharedMemoryStatusRequest)
      ///@@                   returns (SystemSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered system-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryStatusResponse> SystemSharedMemoryStatusAsync(global::Inference.SystemSharedMemoryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      ///@@                     SystemSharedMemoryStatusRequest)
      ///@@                   returns (SystemSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered system-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryStatusResponse> SystemSharedMemoryStatusAsync(global::Inference.SystemSharedMemoryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SystemSharedMemoryStatus, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      ///@@                     SystemSharedMemoryRegisterRequest)
      ///@@                   returns (SystemSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryRegisterResponse SystemSharedMemoryRegister(global::Inference.SystemSharedMemoryRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      ///@@                     SystemSharedMemoryRegisterRequest)
      ///@@                   returns (SystemSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryRegisterResponse SystemSharedMemoryRegister(global::Inference.SystemSharedMemoryRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SystemSharedMemoryRegister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      ///@@                     SystemSharedMemoryRegisterRequest)
      ///@@                   returns (SystemSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryRegisterResponse> SystemSharedMemoryRegisterAsync(global::Inference.SystemSharedMemoryRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      ///@@                     SystemSharedMemoryRegisterRequest)
      ///@@                   returns (SystemSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryRegisterResponse> SystemSharedMemoryRegisterAsync(global::Inference.SystemSharedMemoryRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SystemSharedMemoryRegister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      ///@@                     SystemSharedMemoryUnregisterRequest)
      ///@@                   returns (SystemSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryUnregisterResponse SystemSharedMemoryUnregister(global::Inference.SystemSharedMemoryUnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryUnregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      ///@@                     SystemSharedMemoryUnregisterRequest)
      ///@@                   returns (SystemSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.SystemSharedMemoryUnregisterResponse SystemSharedMemoryUnregister(global::Inference.SystemSharedMemoryUnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SystemSharedMemoryUnregister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      ///@@                     SystemSharedMemoryUnregisterRequest)
      ///@@                   returns (SystemSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryUnregisterResponse> SystemSharedMemoryUnregisterAsync(global::Inference.SystemSharedMemoryUnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SystemSharedMemoryUnregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      ///@@                     SystemSharedMemoryUnregisterRequest)
      ///@@                   returns (SystemSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a system-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.SystemSharedMemoryUnregisterResponse> SystemSharedMemoryUnregisterAsync(global::Inference.SystemSharedMemoryUnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SystemSharedMemoryUnregister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      ///@@                     CudaSharedMemoryStatusRequest)
      ///@@                   returns (CudaSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered CUDA-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryStatusResponse CudaSharedMemoryStatus(global::Inference.CudaSharedMemoryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      ///@@                     CudaSharedMemoryStatusRequest)
      ///@@                   returns (CudaSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered CUDA-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryStatusResponse CudaSharedMemoryStatus(global::Inference.CudaSharedMemoryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CudaSharedMemoryStatus, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      ///@@                     CudaSharedMemoryStatusRequest)
      ///@@                   returns (CudaSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered CUDA-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryStatusResponse> CudaSharedMemoryStatusAsync(global::Inference.CudaSharedMemoryStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      ///@@                     CudaSharedMemoryStatusRequest)
      ///@@                   returns (CudaSharedMemoryStatusRespose)
      ///@@
      ///@@     Get the status of all registered CUDA-shared-memory regions.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryStatusResponse> CudaSharedMemoryStatusAsync(global::Inference.CudaSharedMemoryStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CudaSharedMemoryStatus, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      ///@@                     CudaSharedMemoryRegisterRequest)
      ///@@                   returns (CudaSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryRegisterResponse CudaSharedMemoryRegister(global::Inference.CudaSharedMemoryRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      ///@@                     CudaSharedMemoryRegisterRequest)
      ///@@                   returns (CudaSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryRegisterResponse CudaSharedMemoryRegister(global::Inference.CudaSharedMemoryRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CudaSharedMemoryRegister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      ///@@                     CudaSharedMemoryRegisterRequest)
      ///@@                   returns (CudaSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryRegisterResponse> CudaSharedMemoryRegisterAsync(global::Inference.CudaSharedMemoryRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      ///@@                     CudaSharedMemoryRegisterRequest)
      ///@@                   returns (CudaSharedMemoryRegisterResponse)
      ///@@
      ///@@     Register a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryRegisterResponse> CudaSharedMemoryRegisterAsync(global::Inference.CudaSharedMemoryRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CudaSharedMemoryRegister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      ///@@                     CudaSharedMemoryUnregisterRequest)
      ///@@                   returns (CudaSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryUnregisterResponse CudaSharedMemoryUnregister(global::Inference.CudaSharedMemoryUnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryUnregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      ///@@                     CudaSharedMemoryUnregisterRequest)
      ///@@                   returns (CudaSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.CudaSharedMemoryUnregisterResponse CudaSharedMemoryUnregister(global::Inference.CudaSharedMemoryUnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CudaSharedMemoryUnregister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      ///@@                     CudaSharedMemoryUnregisterRequest)
      ///@@                   returns (CudaSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryUnregisterResponse> CudaSharedMemoryUnregisterAsync(global::Inference.CudaSharedMemoryUnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CudaSharedMemoryUnregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      ///@@                     CudaSharedMemoryUnregisterRequest)
      ///@@                   returns (CudaSharedMemoryUnregisterResponse)
      ///@@
      ///@@     Unregister a CUDA-shared-memory region.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.CudaSharedMemoryUnregisterResponse> CudaSharedMemoryUnregisterAsync(global::Inference.CudaSharedMemoryUnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CudaSharedMemoryUnregister, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      ///@@                   returns (TraceSettingResponse)
      ///@@
      ///@@     Update and get the trace setting of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.TraceSettingResponse TraceSetting(global::Inference.TraceSettingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraceSetting(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      ///@@                   returns (TraceSettingResponse)
      ///@@
      ///@@     Update and get the trace setting of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.TraceSettingResponse TraceSetting(global::Inference.TraceSettingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraceSetting, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      ///@@                   returns (TraceSettingResponse)
      ///@@
      ///@@     Update and get the trace setting of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.TraceSettingResponse> TraceSettingAsync(global::Inference.TraceSettingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraceSettingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      ///@@                   returns (TraceSettingResponse)
      ///@@
      ///@@     Update and get the trace setting of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.TraceSettingResponse> TraceSettingAsync(global::Inference.TraceSettingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraceSetting, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      ///@@                   returns (LogSettingsResponse)
      ///@@
      ///@@     Update and get the log settings of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.LogSettingsResponse LogSettings(global::Inference.LogSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      ///@@                   returns (LogSettingsResponse)
      ///@@
      ///@@     Update and get the log settings of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inference.LogSettingsResponse LogSettings(global::Inference.LogSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogSettings, null, options, request);
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      ///@@                   returns (LogSettingsResponse)
      ///@@
      ///@@     Update and get the log settings of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.LogSettingsResponse> LogSettingsAsync(global::Inference.LogSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///@@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      ///@@                   returns (LogSettingsResponse)
      ///@@
      ///@@     Update and get the log settings of the Triton server.
      ///@@
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inference.LogSettingsResponse> LogSettingsAsync(global::Inference.LogSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogSettings, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GRPCInferenceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GRPCInferenceServiceClient(configuration);
      }
    }

  }
}
#endregion
